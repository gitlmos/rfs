// stylelint-disable scss/dollar-variable-default

// SCSS RFS function
//
// Responsive font sizes
//
// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)

// Base font size
$rfs-base-font-size: 20 !default;
$rfs-font-size-unit: rem !default;

// Breakpoint at where font-size starts decreasing if screen width is smaller
$rfs-breakpoint: 1200 !default;

// Resize font size based on screen height and width
$rfs-two-dimensional: false !default;

// Factor of decrease
$rfs-factor: 10 !default;

// 1 rem = $rfs-rem-value px
$rfs-rem-value: 16 !default;

// Disable RFS by setting $enable-responsive-font-sizes to false
$enable-responsive-font-sizes: true !default;

// Responsive font size mixin
@function rfs($fs) {
  // Cache $fs unit
  $fs-unit: if(type-of($fs) == "number", unit($fs), false);

  // If $fs isn't a number (like inherit) or $fs has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
  @if not $fs-unit or $fs-unit != "" and $fs-unit != "px" and $fs-unit != "rem" or $fs == 0 {
    @return $fs;
  }
  @else {
    // Remove unit from $fs for calculations
    @if $fs-unit == "px" {
      $fs: $fs / ($fs * 0 + 1);
    }
    @else if $fs-unit == "rem" {
      $fs: $fs / ($fs * 0 + 1 / $rfs-rem-value);
    }

    // Set default font size
    $rfs-static: if($rfs-font-size-unit == rem, #{$fs / $rfs-rem-value}rem, #{$fs}px);

    // Only add the `min()` if the font size is bigger than the minimum font size
    @if $fs <= $rfs-base-font-size or not $enable-responsive-font-sizes {
      @return $rfs-static;
    }
    @else {
      // Calculate the minimum font size for $fs
      $fs-min: $rfs-base-font-size + ($fs - $rfs-base-font-size) / $rfs-factor;

      // Calculate difference between $fs and the minimum font size
      $fs-diff: $fs - $fs-min;

      // Base font-size formatting
      $min-width: if($rfs-font-size-unit == rem, #{$fs-min / $rfs-rem-value}rem, #{$fs-min}px);

      // Use `vmin` if two-dimensional is enabled
      $variable-unit: if($rfs-two-dimensional, vmin, vw);

      // Calculate the variable width between 0 and $rfs-breakpoint
      $variable-width: #{$fs-diff * 100 / $rfs-breakpoint}#{$variable-unit};

      // Set the calculated font-size
      $rfs-fluid: calc(#{$min-width} + #{$variable-width});

      // Use unquote to prevent triggering sass' build in `min()` function
      @return unquote("min(#{$rfs-static}, #{$rfs-fluid})");
    }
  }
}
